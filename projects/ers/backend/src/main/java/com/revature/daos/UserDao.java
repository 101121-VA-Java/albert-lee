package com.revature.daos;

import java.io.IOException;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import com.revature.models.User;
import com.revature.util.ConnectionUtil;

public class UserDao implements GenericDao<User>{
	/**
	 * Dao method to create an employee, assigns an employee id generated by the database before returning
	 * @param user object with all fields except for id
	 * @return a user id or -1
	 */
	@Override
	public int add(User u) {
		int result = -1;
		try (Connection con = ConnectionUtil.getConnection()){
			String sql = "insert into ers_users (ers_username, ers_password, user_first_name, user_last_name, user_email, user_role_id, ers_manager_id)" + 
			"values (?,?,?,?,?,?,?) returning ers_users_id;";
			PreparedStatement ps = con.prepareStatement(sql);
			ps.setString(1, u.getUsername());
			ps.setString(2, u.getPassword());
			ps.setString(3, u.getFirstName());
			ps.setString(4, u.getLastName());
			ps.setString(5, u.getEmail());
			ps.setInt(6, u.getRoleId());
			ps.setInt(7, u.getManager().getId());
			ResultSet rs = ps.executeQuery();
			if(rs.next()) {
				result = rs.getInt("ers_users_id");
			}
		} catch (SQLException | IOException e) {
			e.printStackTrace();
		}
		return result;
	}

    /**
	 * Dao method to retrieve all employees
	 * @return a List of Employees or an empty list if none are found
	 */
    @Override
    public List<User> getAll() {
        List<User> users = new ArrayList<>();
		try (Connection c = ConnectionUtil.getConnection()) {
			String sql = "select * from ers_users;";
			Statement s = c.createStatement();
			ResultSet rs = s.executeQuery(sql);
			while (rs.next()) {
				User u = new User(
						rs.getInt("ers_users_id"), 
						rs.getString("ers_username"), 
						rs.getString("user_first_name"),
						rs.getString("user_last_name"),
						rs.getString("user_email"),
						rs.getInt("user_role_id"),
						new User(rs.getInt("ers_users_id")));
				users.add(u);
			}
		} catch (SQLException | IOException e) {
			e.printStackTrace();
		}
		return users;
    }

    @Override
    public int update(User u) {
        int result = 0;
		try (Connection con = ConnectionUtil.getConnection()){
			String sql = "UPDATE ers_users SET ers_username = ?, ers_password = ?, user_email = ?, user_first_name = ?, user_last_name = ?, user_role_id = ?, ers_manager_id = ? WHERE ers_users_id = ?;";
			PreparedStatement ps = con.prepareStatement(sql);
			ps.setString(1, u.getUsername());
            ps.setString(2, u.getPassword());
            ps.setString(3, u.getEmail());
            ps.setString(4, u.getFirstName());
            ps.setString(5, u.getLastName());
            ps.setInt(6, u.getRoleId());
			ps.setInt(7, u.getManager().getId());
			ps.setInt(8, u.getId());
			result = ps.executeUpdate();
			if (result > 0) return result;
		} catch (SQLException | IOException e) {
			e.printStackTrace();
		}
		return result;
    }

    @Override
    public void delete(int id) {
    }

    public User getUserById(int id){
        User u = null;
		try (Connection con = ConnectionUtil.getConnection()){
			String sql = "select * from ers_users where ers_users_id = ?;";
			PreparedStatement ps = con.prepareStatement(sql);
			ps.setInt(1, id);
			ResultSet rs = ps.executeQuery();
			if(rs.next()) {
				u = new User(
					rs.getInt("ers_users_id"), 
					rs.getString("ers_username"), 
					rs.getString("user_first_name"), 
					rs.getString("user_last_name"), 
					rs.getString("user_email"), 
					rs.getInt("user_role_id"), 
					new User(rs.getInt("ers_manager_id")));
			}
		} catch (SQLException | IOException e) {
			e.printStackTrace();
		}
		return u;
    }

	/**
	 * Dao method to retrieve employees by a manager id
	 * @param id of the manager employee
	 * @return a List of Employees or an empty list if none are found
	 * @throws SQLException
	 */
	// public List<User> getEmployeesByManagerId(int id) throws SQLException {
		
	// 	List<User> users = new ArrayList<>();

	// 	try (Connection c = ConnectionUtil.getConnection()) {
	// 		String sql = "select * from employees where m_id = ?;";

	// 		PreparedStatement ps = c.prepareStatement(sql);
			
	// 		ps.setInt(1, id);
			
	// 		ResultSet rs = ps.executeQuery();

	// 		while (rs.next()) {
	// 			// Retrieving employee info, setting manager's value to another Employee dummy object with only its id
	// 			User e = new User(
	// 					rs.getInt("e_id"), 
	// 					rs.getString("e_name"), 
	// 					rs.getString("e_username"),
	// 					rs.getString("e_password"), 
	// 					Role.valueOf(rs.getString("e_role")),
	// 					new User(rs.getInt("m_id")));

	// 			// Adding user to userss list to be returned
	// 			users.add(e);
	// 		}
	// 	} catch (SQLDataException | IOException e) {
	// 		e.printStackTrace();
	// 	}

	// 	return users;
	// }
	
	/**
	 * Dao method to retrieve an employee by id
	 * @param id of the employee
	 * @return an employee or null if none is found
	 */

	// public User getEmployeeById(int id) {

	// 	User user = null;

	// 	try (Connection c = ConnectionUtil.getConnection()) {
	// 		String sql = "select * from users where e_id = ?;";

	// 		PreparedStatement ps = c.prepareStatement(sql);

	// 		ps.setInt(1, id);

	// 		ResultSet rs = ps.executeQuery();

	// 		if (rs.next()) {
	// 			user = new User(
	// 					rs.getInt("e_id"),
	// 					rs.getString("e_name"), 
	// 					rs.getString("e_username"),
	// 					rs.getString("e_password"), 
	// 					Role.valueOf(rs.getString("e_role")),
	// 					new User(rs.getInt("m_id")));
	// 		}
	// 	} catch (SQLException | IOException e) {
	// 		e.printStackTrace();
	// 	}

	// 	return user;
	// }

	/**
	 * Service method to retrieve an employee by its username
	 * @param username of the user
	 * @return an employee or null if none is found
	 */
	public User getByUsername(String username) {
		User user = null;

		try (Connection c = ConnectionUtil.getConnection()) {
			String sql = "select * from ers_users where ers_username = ?;";

			PreparedStatement ps = c.prepareStatement(sql);

			ps.setString(1, username);

			ResultSet rs = ps.executeQuery();

			if (rs.next()) {
				user = new User(
						rs.getInt("ers_users_id"),
						rs.getString("ers_username"), 
						rs.getString("ers_password"), 
						rs.getString("user_first_name"),
						rs.getString("user_last_name"),
						rs.getString("user_email"),
						rs.getInt("user_role_id"),
						new User (rs.getInt("ers_manager_id")));
			}
		} catch (SQLException | IOException e) {
			e.printStackTrace();
		}

		return user;
	}
	
}
