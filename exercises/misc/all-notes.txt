Week 1
    Day 1, October 11th, 2021
    Basic command line - 

        relative path: points to a location in the filesystem based on the current directory
        absolute path: points to a location in the filesystem regardless of the current 

        ~: refers to the home directory
        /: refers to the root directory
            - upmost directory
        ..: refers to the previous directory
        .: refers to the current directory

        touch: create a file
        ls: list the content of a directory(folder)
            -a (flag) : to list hidden items
                - hidden items are preceded with a . ie: .git
        cd: change directory - use tab to autocomplete
        pwd: list the absolute path of the current directory
        mkdir: create a directory
        mv: move element (file/directory)
            - mv file targetLocation/[new-filename if desired]
        rm: delete file
            -rf for directory
        rmdir: delete directory
        cat: displays content
        vim/nano: text editors to create/edit files

        Resource for more information:
        https://cheat.sh/


    Day 2, October 12th, 2021
    Git

        - DVCS - Distributed Version Control System
            - VCS - Version Control System
                - tracks history of changes
                    - what
                    - who
                    - when
                - Allow for full access locally
                    - self-contained history
        - Version control tool used to manage source code, it can save snapshots of a project on one or more branching paths
            - Repository: files, folders, objects and branches that represent a project managed by git (managed within a .git folder)
            - Working directory: working area, contains the project and its files
            - Staging area: area between the working directory and the local repository where changes are added before a commit
            - Commit: snapshot of the staged changes from a working directory
        
        - Git workflow
            - Create/obtaining a repository
                - git clone - obtains a copy of a remote repository on a local device
                - git init - initializes a repository locally (creates a .git folder)
            - Adding/removing changes to/from the staging area
                - git add
                - git rm
            - Visualize state of repository
                - git status
            - Create a commit locally
                - git commit
                    - -m "insightful message"
            - Push a commit to the remote repository
                - git push

        - git pull
            - to retrieve changes from remote
        - Git Branches
            - git branch - list the available branches
            - git checkout - change branch
                    -b: create a new branch

    Day 3, October 13th, 2021
    Java Basics - 
        Full Stack architecture:
            - refers to an architecture to design a web application
                - client/server
                    - client: who/what is making the request
                    - server: who/what is handling the request and returning a response
                - front end
                - back end
                - database
                - Communication between the different components

        Java
            - Java is a mature language
                - lot of documentation 
                - supported/ backed by Oracle
            - Highlevel programming language
            - OOP language
                - also supports other programming paradigms (ie: functional)
            - Compiled language
                - provides compile time error checking
            - Strictly typed language
                - variable needs to declared with a type
            - WORA/ Platform independence
                - via the JVM
            - Multithreaded language
            - Automatic memory management
                - Garbage collector

        JDK/JRE/JVM
            - Java Development Kit
                - Contains the JVM and the JRE
                - Contains the compiler (javac) and other tools for development
                - Provide an environment to develop and execute a Java program
            - Java Runtime Environment
                - Includes core libraries of Java
                - Includes the JVM
                - ALL THAT'S NEEDED TO RUN an application
            - Java Virtual Machine
                - takes the compiled code and executes it starting from the main method
            - Compilation process in Java
                - Highlevel Java code (.java) => Compilation Step (javac) => Bytecode (intermediary language) (.class) 
                - then interpreted by the JVM

        Datatypes
            - primitive
                - boolean
                    - true/false: size is jvm dependent
                - character
                    - 'A': 2bytes
                - Whole numbers
                    - byte: 1byte
                    - short: 2bytes
                    - int: 4bytes // default
                    - long: 8 bytes
                - Floating points, accomodate for decimals
                    - float: 4 bytes
                    - double: 8 bytes // default
            - reference

            - Strings
                - objects
                - Arrays of characters

        Control flow statements
            - controls the flow of execution of an application
            - if/else if/else
                - determine whether a block of code executes based on a condition
            - for 
                - best used when number of iteration is known
                - for( initialization; termination condition; increment){
                    statements to be ran
                }		
            - while
                - best used when the number of iteration is unknown
                - while(condition){
                    statements to be ran while the condition remains true
                }
            - do while
                - while loop that executes at least once regardless of the condition
            - switch
                - switch(expression to be evaluated){
                    case 1: 
                        [statements];
                        break;
                    case 2:
                        [statements];
                        break;
                    default:
                        [statements];
                        break;
                }
        Truth tables
            - && => and
            - || => or
            - True && True => T
            - T && F => F
            - F && F => F

            - T || T => T
            - T || F => T
            - F || F => F
        = vs ==
            - =: assigns a value to a variable
            - ==: compares the value of primitive datatypes

        Methods
            - blocks of reusable logic that can take in arguments and can have a return type
                - int... any datatypes
                - void: no return types

        Create a Calculator class
            - add
                public int add(int a, int b)
            - subtract
                public int subtract(int a, int b)
            - multiply
                public double multiply(double a, double b)
            - remainder
                public int remainder(int a, int b)
            - weekday
                public String weekday(String weekday)
                    - return a different string based on the weekday passed in, if it's not a week day return a default message

        1. countdown: make sure that argument is positive,
            then count down from that number to 0. if
            argument is not positive, it should print
            "input must be positive or 0."
            public void countdown(int startValue) { }

        2. greeting: takes in a name, should print a greeting
        using the name.

    Day 4,October 14, 2021
    Review - 
            - Java
                - Mature language, a lot of support for it
                    - Oracle backed
                - Multiple programming paradigm
                    - OOP
                    - functional
                - OS independent
                    - JVM
                - Multithreaded
                - Automatic memory management
                - compiled language
                - strictly typed language
            
            - JDK/JRE/JVM
                - JDK
                    - Java Development Kit
                        - Tools to create java application
                        - Compiler
                        - Java Runtime Environment
                            - Everything that is needed to run an application
                            - Java Virtual Machine
                            - java core libraries
            
            - Variables
                - primitives (stored in stack)
                    - whole numbers
                        - byte, short, int, long
                    - floating points
                        - float, double
                    - boolean
                    - char
                - reference types (stored in stack): refers to an object in heap

            - String
                - immutable array of characters
                    - meaning cannot be changed, when a value is reassigned, a new String is created (if needed)
                - denoted by quotation marks: "this is a string"
                    - String s = "Hello";
                        - leverages the String pool
                            - a place in the heap for strings to be reused
                    - String s1 = new String("Hello"); 
                        - does not leverage the String pool and creates a new String everytime

            - Methods
                - reusable block of code that can take in arguments and return something
                    - void: method does not return anything
                    - return value;
                - Methods should focus on doing one thing well
                - main method
                    - entrypoint for the jvm
            
            - Control flow statements
                - if/else if/else
                - for
                - while
                - do while
                - switch


        Naming Conventions in Java
            - PascalCase for ClassName/InterfaceName
            - camelCase for methodName/variableName
            - reverse url for package declaration: com.revature.tranhuu
            - can't be reserved keywords

        Arrays
            - groups of elements of the same datatype, can be primitives or objects
            - Arrays are contiguous blocks in memory and as such the size of an array must be specified when initialized
            - Elements in an array can be selected using their index, index starts at 0
                - arrays have a property called "length"
                    - represents the length of an array
                    - .length
            - boolean[] bools = {true, false, true}; 
            - boolean[] bools = new boolean[3];

        Conditional Operators:
            - &, | - bitwise operator: evaluates both sides
            - &&, || - short circuit operators: evaluates one side if enough

        Ternary operator
            - shorthand version of an if statement
            - [expression to be evaluated] ? [ if True ] : [if False];

        Packages
            - group items based on what they do/ provide logical structure
                - separation of concerns:
                    - a package to hold all models/entities
                    - a package to hold all classes related to data persistence
                    - a package to hold all classes related to business logic (services)
                    - a package to hold all classes to interact with the web 
            - are declared at the top of the class
                - follows the reverse URL format/ reverse domain name
                - package com.revature.models;
            - folder structure
                - allows for resolution of naming conflicts
                - define access (access modifiers)
                    - how classes can access one another

        Class
            - Blueprint for object, defines states and behaviors
                - states refer to field, properties
                - behaviors refer to methods
                - objects can be instantiated using the new keyword which calls the constructor
            - Constructors
                - special method that has no return type and are used to create an instance of a class
                - called using the "new" keyword
                - default constructor: a no args-constructor provided by the compiler if NO OTHER CONSTRUCTOR IS PROVIDED (No args or parameterized)
                - no-args constructor: constructor with no parameter
                - parameterized/overloaded constructor: constructor with one or more parameters

        Exercise:
        - create model with at least 2 states and 1 behavior.
        - create a no args constructor and a parameterized constructor
        - test it out in a separate file with a main method
        - push it to github
    Day 5, October 15, 2021
    Scopes, AWS - 
        scope of a variable
            - do not confuse scopes with access (ie: access modifiers)
            - lifetime of a variable
            - loop/block scope
                - variable only exists during the execution of a block
                    - a variable declared within a loop/conditional statement
                        - { }
            - method scope
                - variable only exists withn the scope of a method
                    - includes parameters and variables declared within that scope

            - instance/object scope
                - variable lives throughout the lifetime of an object
                    - begins when the object is instantiated up to the point the object is garbage collected
            
            - static/class scope
                - variables live throughout the lifetime of an application
                    - associated with a class

        AWS
            - Amazon Web Services
            - Offers cloud solutions to customer needs
            - Why/What is the cloud?
                - cost-saving
                    - not having to manage servers on-premise
                        - staff
                        - maintaining/setting up/upgrading/...
                - Infrastructure
                - Scalability
                    - Auto-scaling
                        - "Pay for what you use"
                - Durability
            - Regions and Availability zones
                - Regions
                    - groupings of AWS zones world-wide
                - Availability zones
                    - datacenters containing the infrastructure

            - Services
                - EC2
                    - Elastic Cloud Compute
                    - Virtual machine on the cloud
                    - Connecting to EC2
                        - ssh -i path/to/file.pem ec2-user@[public-dns]

                - AMI
                    - Amazon Machine Image
                    - Template that is needed to launch an instance of a virtual server
                    - Includes OS
                        - We're going to be using Amazon Linux 2
                - EBS
                    - Elastic Block Storage
                    - Block storage that is associated to EC2
                    - Virtual hard drive
                    - Backed up in the Availability Zone

                - Security Groups
                    - Details what traffic is allowed in and out
                    - Traffic filter

    Week 1 Questions
        ## Java
        - What is Java
        - What are the benefits of Java
        - What is the difference betwwen the JRE, JDK, and JVM
        - What happens during the compilation process
        - What is a constructor
        - What are the primitive datatypes
        - What is a no args constructor
        - What is the default constructor
        - What are the scopes of a variable in java
        - What are the different control statements and how are they different
        - How do you create an array in java
        - What are packages and imports
        - What is static
        - What are Strings
        - What are some string methods
        - What is the difference between the stack and the heap
        - What is the difference between == and .equals()?

        ## Git
        - What is version control?
        - What is the difference between git and GitHub?
        - List the git commands you know and what they do
        - How would you prevent a file from being tracked by git?
        - What is a branch? What are some common branching strategies?
        - What is a merge conflict? How do you prevent these and resolve if it happens?
        - What is a GitHub pull request?
        - What is the git workflow for editing code and saving changes?
        - What is a commit?
        - How would you go back in your commit history if you make a mistake?
        - What is a Github issue?

        ## Unix
        - Where are the root and home directories located? How to get to each?
        - What Linux command would you use to:
            - Navigate your file hierarchy on the command line?
            - List files? What about hidden files?
            - Edit a file from the terminal
        - What is a package manager? What are some common Linux package managers?

        ## AWS
        - How would you describe AWS? What is “the cloud” or “cloud computing” and why is it so popular now?
        - What’s the difference between a Region and an Availability Zone (AZ)?
        - How are you charged for using AWS services?
        - Explain the following AWS services:
            - EC2
            - EBS
            - AMI
Week 2
    Day 6, October 18, 2021
    Setup - 
        Week 2, Monday - 
        - QC
        - Assessment - https://coding.revature.com/AuthenticateKey?id=e495e49d04
        - 1-o-1
            - groups of 3:
                - Malolan, Peter, Andrew
                - Kendrick, Alex, Dean
                - Albert, Tricia, Andre
                - Tevon, Sam, Patience
                - Brayden, Hannah, Gerardo
                - Bruno, Davey, Kim
                - Bezza, David, Jeremy


        Meanwhile:
            - make sure Eclipse by tomorrow
            - create a Hackerrank account
            - review RevPro notes
            - more java-practice:
                - https://classroom.github.com/a/re6_oklK
                - setup:
                    - clone the created directory on your device
                    - open Eclipse
                    - File -> Open Project from File System
                        - Next to Import source, click Directory...
                        - Select the cloned folder
                            - in the Folder section, it should show a checkmark
                            - Click Finish at the bottom
                    - At the bottom right, you'll see a progress bar while the project is set up
                    - In the Project Explorer tab, navigate to EvaluationService.java
                        - Implement the methods!
                    - As you're progressing through the assignment, make sure to push your progress to GitHub
                - checking methods:
                    -  right click on the project name (ie: java-core-your-name)
                        - Select Run As -> JUnit Test
        Creating new project in Eclipse:
            - File -> New -> Maven Project
            - check create simple project and specify the location you want to create your project
            - Click Next
            - Specify the group id (ie: com.revature)
            - Specify the artifact id (ie: name of your project)

            - in pom.xml add: (nested within the project tag)
        <properties>
            <maven.compiler.target>1.8</maven.compiler.target>
            <maven.compiler.source>1.8</maven.compiler.source>
        </properties>
    Day 7, October 19, 2021
    OOP intro - 
            Java resources:
            - https://docs.oracle.com/javase/tutorial/java/index.html
            - https://www.tutorialspoint.com/java/index.htm
            - https://docs.oracle.com/javase/8/docs/api/index.html

        Groups: (Come up with a team name)
        Tricia
        Hannah
        Bezza
        Andrew

        Jeremy
        Kendrick
        Brayden
        Gerardo

        Sam
        Patience
        Bruno
        Alex

        Albert
        Tevon
        Dean
        Andre

        Kim
        Davey
        David
        Peter
        Malolan

        String
            - reference type, array of characters
            - String is a class, the strings that we're working with are instances of that class
            - immutable - cannot be changed, value of a string remains the same (final keyword)
            - Strings are usually stored in the String pool (in the heap)
                - where all strings instantiated literally (ie: String s = "Hello";) are stored
                - this allows Java to reuse the save String for repeated valued strings
            - String newS = new String("Hello"); //Creates the string in the heap itself instead of in the String Pool
            - String s = "Hello"; //Creates the string in the String Pool, can be reused
            - interning
                - .intern() method - checks if a String is already in the String Pool and if it exists returns a reference to it,
                    else creates that string and returns that reference

        StringBuilder/ StringBuffer
            - mutable alternatives to Strings with methods that allow for manipulation
                - append, replace...
            - StringBuilder is not thread-safe - faster
            - StringBuffer is thread-safe - slower

        Scanner
            - https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html
            - Class in java that can be used to "scan" through several things
                - files, console inputs, input streams
            - can parse through inputs for different types, read an entire line... etc.
            - Recommendation: use one scanner per input stream 
            - Good practice: close resources when no longer needed

        OOP
            - Programming paradigm which relies on classes and objects to model real world objects
            - 4 pillars of OOP
                - Encapsulation
                - Inheritance
                - Polymorphism
                - Abstraction

        Class
            - Blueprint for an object, define their states and behaviors
            - Members of a class
                - variables and methods of that class
                    - Object/Instance
                        - Instance variables
                        - Instance methods
                    - Class/Doesn't belong to a specific object
                        - Static variables
                        - Static methods

        Object
            - Instance of a class
                - can be created using the "new" keyword
                    - ClassName varName = new ClassName();// invokes the no-args constructor for ClassName
                    - ClassName varName = new ClassName(someVar);// invokes the parameterized constructor for ClassName
            - Beware of the Object class
                - Parent of all classes
                    - contains methods such:
                        - toString() - override to return a String representation of an object
                        - equals(...) - override to actually compare the fields of the instances

        Encapsulation
            - refers to the ability for an object to protect its states and its behaviors
            - can be achieved by defining accessibility of classmembers using access modifiers
                - setting variables to private
            - using setters and getters to retrieve/change the states of an object

        Access modifiers
            - specify which classes have access to a class and its members
                - DO NOT CONFUSE WITH SCOPES
                - public - least restrictive, all the classes within the application have access
                - protected - all of the classes within the package and all of the sub/child classes have access
                - "default"/none (none is defined, if left blank) - all of the classes within the package have access
                    - NOTE: THE DEFAULT KEYWORD IS USED FOR SOMETHING ELSE 
                - private - the most restrictive, only the class itself has access

        Create Task.class
            - String name
            - LocalDate dueDate
            - encapsulate the class
            - create setter and getter
                - manually write at least one of them
            - give a toString() and a .equals() method
    Day 8, October 20, 2021
    Polymorphism and inheritance - 
            Inheritance
            - subclasses/children classes adopting states and behaviors from a parent/super class
            - deriving classes allows for code reusability and more efficient development
                - DRY - Do not repeat yourself - principle
            - keyword "extends"
                - by default/implicitely every class extends the Object class
            - by default the first line of every constructor is a call the the parent's constructor (super())
                - super is a keyword that refers to the parent class
                    - can access states and behaviors from the parent class dependending on the access modifer
                - this vs super
                - this - refers to the current instance
                - super - refers to the parent
            - Java does not support multiple inheritance
                - diamond problem

        Polymorphism
            - refers to the ability of objects and methods to adapt their behaviors in different contexts
                - can occur at compile time or at runtime
            - method overloading
                - HAPPENS WITHIN THE SAME CLASS
                - creating multiple methods in the same class with the same method name
                    but with different number and/or type(s) of parameters
                - can change the return type as well
                - compile time/static polymorphism
            - method overriding
                - write a method in a subclass with the same method signature as in the parent class 
                    but with a different implementation
                - ie: overriding the toString() method to be relevant to the subclass
                - can add @Override
                - runtime polymorphism
            - covariance return types
                - when Overriding a method, there is an option to change the return type
                    - the new return type would have to be a child/subtype of the original type
            - upcasting/downcasting
                - upcasting refers to instantiating/assigin a child by declaring its parent's reference type
                    - Task t = new BoringTask();
                    - this restricts the available methods to the methods declared in the parent class
                        however when a method is called, it calls the child's implementation
                - downcasting refers to instiating/ assigning an object by declaring its child class as a reference type
                    - BoringTask bt = (BoringTask) new Task();
                    - leads to issue, please avoid doing that
    Day 9, October 21, 2021
    Abstraction, non-access modifiers, exceptions - 
        Abstraction - 
            - a way to hide complex implementation behind a simple interface
                - using methods without actually know how they're implememented
            - in Java, abstraction is used via the abstract and the interface keywords
                - "abstract" keyword - non access modifier
                    - can be found in front of a class
                        - [access mod] abstract class [ClassName] {}
                        - means that the class cannot be instatiated
                            - cannot create an object of the abstract class
                            - like template that pushes a user to use more specific CONCRETE(non-abstract) child classes
                        - abstract classes can be inherited
                        - can have abstract methods
                            - Concrete (non-abstract) classes cannot have abstract methods
                                - ie: if an abstract method is present, the class has to be abstract
                            - Abtract classes can have 0 or more abstract methods
                    - can be found in front of a method
                        - [accessMod] abstract [returnType] [methodName]([params]);
                            - method without a body/implementation
                                - method is left to be implemented later (ie: child classes/ interface implementing classes)
                        - abstract methods cannot be private
                    - cannot be found in front of a variable  
                - "interface" keyword
                    - declares behavior(s) for classes to implement
                        - contract like
                        - a class can implement as many interfaces as desired
                    - convention dictates that interface should end the name with "-able"
                    - every method declared in an interface is going to be implicitely public abstract
                        - void doSomething();
                        - implicitely: public abstract void doSomething();
                    - can have variables
                        - variables must be public static final(cannot be changed)
                            - basically a constant
                            - implicit to interfaces
                    - interfaces can extend one another
                    - Types of interfaces
                        - Marker interfaces
                            - interfaces with no methods
                            - used to provide information to the compiler and JVM
                        - Functional interfaces
                            - interfaces with 1 methods
                            - can use lambda expressions
                        - regular interfaces
                            - any interface
                    - In java 8 the "default" keyword was introduced
                        - to provide default implementation to methods in interfaces in needed

        non-access modifiers
            - abstract
            - default
            - static
                - associated with a class rather than with an instance
                    - call the method/property using the classname instead of an instance
                - in front of a method
                - in front of a field
            - final
                - in front of a class
                    - [access mod] final class [ClassName]{}
                    - the class cannot be extended
                - in front of a field
                    - [access mod] final [varType] [varName];
                    - indicates that a variable/field cannot reassigned once initialized
                - in front of a method
                    - [access mod] final [returnType] [methodName]([params]){}
                    - indicates that the method cannot be overriden
                        - makes sure that all subclasses/children classes keep that implementation
            - synchronized
                - has to do with threads
                - only one thread can access a resource at a time

        Exception
        - represents a condition that prevents a method from completing successfully
        - an object created from the Exception class and its subclasses
            - inherits from the Throwable class
        - Error vs Exception
            - Error
                - extends from the Throwable class
                - identifies internal errors that cannot be recovered from
                    - StackOverflowError, NoClassDefFoundError
                - bad practice to try to handle those
            - Exception
                - divided into 2 types of exceptions
                    - Checked/Compile time exceptions
                        - "compiler-time exceptions", cannot compile the code until handled
                        - Exception and its subclasses EXCEPT RuntimeException and its subclasses
                        - 
                    - Unchecked/Runtime exceptions
                        - arises from coding errors/ can usually be prevented using some kind of validation
                            - ie: ArrayIndexOutOfBoundsException, Arithmetic Exception...
                        - not checked by the compiler
                        - HAS TO BE a RuntimeException or a children of that class
            - IMPORTANT NOTE:
                - ALL EXCEPTIONS ARE THROWN/OCCUR AT RUNTIME
                - Compile time exception require exception handling logic at compile time
        - Exception Handling
            - Try block
                - used to encapsulate any statements that may throw an exception
            - Catch block 
                - used to provide an exception handling behavior
                    - specific logic/behavior to be executed if an exception of a certain type is caught
                    - catch (ExceptionType1 | ExceptionType2 e){
                        // behavior to handle
                    } catch (Exception e){
                        // behavior to handle any exception
                    }
                        - can catch multiple types in the same block if siblings on the hierarchy
                        - have multiple catch blocks, from most specific to least specific exception type
                            - otherwise the most generic exception will catch all
            - finally block
                - executes regardless of the outcome
                    - whether an exception is thrown or not
                - the way to skip a finally block is by using
                    - System.exit(0);
                - usually used to free up resources
            - try with resources
                - allows a resource to be closed without requiring a finally block
                - resource must implement the AutoCloseable interface
            - throws
                - use in the method signature "throws [ExceptionType]"
                - if there is not enough info to handle an exception properly at the time it's thrown
                    - let Java know that the exception will be handled by the calling method
        - Throwing Exception
            - "throw new [ExceptionType]();"
        - Custom Exception
            - can create a custom exception in java by extending Exception or its subclasses
                - to create a runtime/unchecked exception, extend from RuntimeException or a children of that class
                - to create a compiletime/checked exception, extend from Exception and its subclasses EXCEPT RuntimeException and its subclasses
    Day 10, October 22, 2021
    Maven, Testing - 
        Maven
        - Project management tool, build automation tool
        - Project management
            - handle our dependencies for us
                - dependency:
                    - refers to frameworks/libraries written by other developers to be used in your project
                        - based on:
                            - groupId
                            - artifactId
                            - version
            - https://mvnrepository.com/
            - in the pom.xml
                - Project Object Model
                    - contains information about the project
                    - helps ensuring that everyone on a team is working with the same dependencies and versions
        <dependencies>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-api</artifactId>
                <version>5.8.1</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>42.2.23</version>
            </dependency>
        </dependencies>
            - stored locally in the ~/.m2 folder
        - Build automation tool
            - manages the lifecycle of your application
            - goal of maven is to create an artifact to be deployed
                - 3 build lifecycles
                    - clean
                        - remove/clean previous artifacts (.jar/.war)
                    - default
                        - test/package your application
                            - validate
                            - compile
                            - test -> compiled code is test
                            - package -> packages all of the compiled code into a war/jar file
                            - verify
                            - install
                            - deploy
                    - Site
                        - documentation
            - basic project structure:
                - src/main/java
                    - where your packages/classes(...) go
                - src/main/resources
                    - resources like files to configure frameworks/libraries
                - src/test/java
                    - where test classes
                - src/test/resources
                    - resources like files related to testing go
                - pom.xml
                    - Project Object Model (contains metadata about project, properities, dependencies, build details)
            - defining the main method in a jar
                - https://maven.apache.org/shared/maven-archiver/examples/classpath.html

        Testing
            - process of checking if an application works as intended
                - positive testing - making sure that an application handles the correct inputs
                - negative testing - making sure that an application handles the incorrect inputs
                - regression testing - making sure that new features added to an application do not break previously written code
                    - making sure that old tests still pass after new code is written

        Unit Testing
            - refers to testing individual unit of functionality
                - in this case methods
            - at the bottom of the testing pyramid, therefore the most abundant type of testing
            - JUnit framework for Java

        TDD (Test Driven Development) 
            - The process of writing tests to fail first to establish the functionality of your application, then writing code to pass those tests
                - way to approach this
                    - write interfaces/ empty methods to establish the functionality desired
                    - write your tests
                    - write code/implement your methods
                - benefits
                    - planning/establishing desired behavior earlier on
                    - easy to find where the issue arises since the tests are present

        JUnit
            - JUnit is a Java Unit Testing Framework
                - JUnit 5
            - includes a lot of annotations and classes in order to write automated unit tests
            - leverages the "assert" methods to check for a particular condition to determine a test passes
                - a test passes when the result obtained is the result desired
                    - ie: an exception to be thrown
                - https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/Assertions.html

    Week 2 Questions
        ## Java Basics
        1.	What is Java? / Explain some features of Java
        2.	What is JRE / JDK / JVM?
        3.	What is the difference between an object and a class?
        4.	What is the root class from which every class extends?
        5.	What are the primitive data types in Java?
        6.	Where are Strings stored?
        7.	Explain stack vs heap
            1.	Are variable references stored on the stack or heap? What about the objects they refer to?
        8.	What are annotations?
        9.	Why are strings immutable in java? How would you make your own objects immutable?
        10.	What is the difference between String, StringBuilder, and StringBuffer?
        11.	What are the different variable scopes in Java?
        12.	What are the access modifiers in Java? Explain them.
        13.	What are the non-access modifiers in Java?
        14.	What is the difference between static and final variables?
        15.	What are the default values for all data types in Java?
        16.	What makes a class immutable?
        17.	What data types are supported in switch statements?
        18.	How to pass multiple values with a single parameter into a method?
        19.	What methods are available in the Object class?
        20.	What is the difference between == and .equals()?
        21.	What is an enhanced for loop?
        22.	What are the 3 usages of “super” keyword?
        23.	What is the first line of any constructor?
        24.	How would you perform constructor chaining?
        25.	What happens if you don’t define a constructor for a class? Can you still instantiate it?

        ## OOP
        1.	What are the 4 pillars of OOP? Explain each and give examples of you implement them in Java code
        2.	What is the difference between an abstract class and an interface?
        3.	Can abstract methods have concrete methods? Can concrete (non-abstract) classes have abstract methods?
        4.	Can static methods access instance variables? Can non-static methods access static variables?
        5.	What are the implicit modifiers for interface variables? methods?
        6.	What is the difference between method overloading and overriding? What are the rules for changing the method signature of overloaded methods?
        7.	What are covariant return types? What rules apply to return types for overridden methods?
        8.	When do you use extends or implements keywords?

        ## Exceptions
        1.	What is the difference between final, .finalize(), and finally?
        2.	Explain throw vs throws vs Throwable
        3.	Do you need a catch block? Can you have more than 1? Is there an order to follow?
        4.	What is base class of all exceptions? What interface do they all implement?
        5.	List some checked and unchecked exceptions?
        6.	Multi-catch block - can you catch more than one exception in a single catch block?

        ## JUnit
        1.	What is JUnit?
        2.	What is TDD?
        3.	What are the annotations in JUnit? Order of execution?
        4.	Give an example of a test case
        5.	How would you prevent a test from being run without commenting it out?
        6. 	How would you test that a specific exception is thrown?

        ## Maven
        1.	What is Maven?
        2.	What is the default Maven build lifecycle?
        3.	Where / when does Maven retrieve dependencies from? Where are they stored locally?
        4.	What is the POM and what is the pom.xml?
        5.	What defines Maven project coordinates?
Week 3
    Day 11, October 25, 2021
    
    Day 12, October 26, 2021
    Java Memory Management
	- Automatic memory management
	- Stack
		- Datastructure that follows a LastInFirstOut pattern (LIFO) 
		- stores primitives and reference variables
		- each thread gets its own stack
		- variables "pop off" the stack once the scope the method is over 
	- Heap
		- Object storage
			- almost anything that's not a primitive is an object
		- String pool
			- special place in the heap to store String literals for reusability
		- shared by all the threads
			- can lead to concurrency issues if not managed properly
		- managed by the garbage collector

	- Pass By Value 
		- means that passing a variable into a method uses the value itself rather than the variable passed in
			- passing a reference variable in a method passes the reference value of the location in the heap and as such changes made to the object are persisted
	- Garbage collection
		- frees up memory/resources once they are no longer referenced
		- Garbage Collector is a daemon thread
			- thread that runs in the background
			- removes objects without references in the heap
				- finalize() 
					- last method called upon an object before it is garbage collected
					- people don't really use this anymore
			- garbage collection cannot be forced, but it can be suggested
				- System.gc();

    Casting
        - converting a datatype to another (int to a long)
            - implicit: if the original datatype has a smaller size than the target datatype (ie: int to long)
            - explicit: if the original datatype has a larger size than the target datatype (ie: long to int)
                - int i = (int) [long];
    Wrapper classes
        - way to treat primitive datatypes as objects
            - Autoboxing: Automatic conversion of a primitive to its wrapper class
            - AutoUnboxing: Automatic conversion of a wrapper class into its primitive
            
    Day 13, October 27, 2021
            .gitignore
            - notice that it starts with "." so it's a hidden file
                - to create can do > touch .gitignore
            - defines files and file extensions to not be tracked by git
                - NOTE: if the file already exists, it will not get deleted but won't updated anymore
                    - have to delete from the repository manually
            - generating .gitignore files:
                - https://www.toptal.com/developers/gitignore/
                - As of now:
                    - Eclipse
                    - Mac
                    - Java
                    - Maven
                    - VsCode
                    - IntelliJ

        Datastructures
            - solutions to interact/work with data in our applications
                - answers to problems such as
                    - dynamic lists
                    - unique values only
                    - ordering

        Collection (I)
            - is an interface that can be considered the "super" interface, or the parent interface of all collections
                - while it extends iterable, Collection declares methods availables in all collections
                    - add();
                    - remove();
                    - contains();
                    - size();
            - collections only work with objects
                - need to work with wrapper classes for primitives
            - Collection interface should not be confused with the Collections class
                - Collections WITH AN S is a class that provides utility methods to work with collections 
            - Extends iterable, what allows collectiosn to be iterated over/ use an iterator

        List (I)
            - is an interface that extends Collection, that can hold duplicate values
            - Concrete implementations of List
                - ArrayList (C)
                    - Dynamically sized array in which elements can be added and removed
                    - ArrayLists leverage indexes which make them more efficient for retrieval operations
                - LinkedList (C)
                    - Consists of a series of nodes which store data and a reference to the next node
                    - LinkedList are better for insertion and deletion operations
        Set (I)
            - is an interface that extends Collection, does not hold duplicate values
            - Concrete implementations
                - HashSet
                    - that cannot promise order (leverages hashcode)
                    - leverages a HashMap in the background
                - TreeSet
                    - ordered
                        - by default follows "natural ordering"
                            - can specify custom order using Comparator/Comparable
        Queue (I)
            - is an interface that extends Collection, generally it follows a FIFO order (First In First Out)
            - Concrete implementations
                - Priority Queues
                    - Ordered by priority
                - Linked List
                    - implements both List and Queue
            - Come in with special methods unique to queues
                - peek
                - poll

        Map (I)
            - is an interface that does NOT extend Collection, leverage a key value pair system
                - it does not extend iterable and there cannot be iterated the traditional way 
                - comes with its own set of methods
            - Concrete implementations
                - HashMap
                    - hashcode: 
                        - method that provides a hash value based on the fields of an object
                            - objects that are equals should return the same hashcode
                            - objects that are not equals may return the same hashcode
                                - a good hashcode implementation should try to produce distinct integers for unequal objects
                        - this value is stored internally to store data in a Map and to improve access operation
                - TreeMap
                    - A map that is ordered 

        Comparable
            - functional interface
                - compareTo method
            - implement in the model class itself
                - should return an integer that will be used to define an order
                    - if integer is negative, is of lesser value
                    - if integer is positive, is of greater value
                    - if integer is 0, objects are of equal value
            - used to define a natural order
        Comparator
            - functional interface
                - compare method
            - implement in a different class
                - Comparator for an object
            - used to define a custom order
    Day 14, October 28, 2021
    Multithreading
	- refers to dealing with applications with concurrent processes
		- these sub-processes/ path of executions are referred to as threads
	- priority
		- defines the order in which threads can access a synchronized resource
			- resource that can only be accessed by one thread at a time
		- threads with higher priority get first dibs over other threads
			- can lead to concurrency issues
	- types of threads
		- User-defined threads
			- JVM ensures their execution to completion
				- ie: main method - main thread
		- Daemon threads
			- "optional"
			- lower in priority
			- run in the background
				- ie: gc
		- each thread gets their own stack but all threads share the same heap

    Creating and running threads in Java
        - extends the Thread class
        - implements the Runnable interface
            - preferred way
        - override the run() method
            - to specify the behavior for a thread
        - instantiate a thread object and invoke the start() method on that thread
            - start() method creates a new thread and invoke the run() on it
            - otherwise if run() is called without start, it will just be executed on the main thread

    States of a thread
        - New
            - created a thread object, run() hasn't been called yet
        - Runnable
            - run() has been called and is executing
        - Blocked
            - waiting for another thread to be done accessing a resource on which a lock has been placed (synchronized keyword)
                - synchronized prevents more than one thread at a time to access a resource
        - Waiting
            - wait()
                - waiting for notify/notifyAll()
            - join()
                - stops the execution of a thread until another thread is done executing
        - Timed-waiting
            - sleep()
                - wait a certain amount of time
        - Terminated
            - everything has been executed

    Concurrency issues
        - starvation
            - lower priority threads not being able to access a resource because higher priority threads keep taking them
        - deadlock
            - occurs when the waiting process is still holding on to another resource that the first needs before it can finish.

    Lambda expressions
        - allows for a compact expression of instances of single method class
            - implements a functional interface without require a whole new class to do so
                - ie: Runnable, run method
        - syntax
            - [interfaceName] [objectName] = ()->[return value];
            - [interfaceName] [objectName] = ([params])->[return value];
            - [interfaceName] [objectName] = ([params])->{
                // code goes here
              };

    Day 15, October 29, 2021
    Log4J2
	- Java Logging Framework, successor of Log4J
	- Logging consists in capturing and persisting information regarding the state of an application
		- making it available at a later time for analysis
	- Main components
		- Loggers
			- responsible for recording log events and forwarding them to the appropriate appender(s)
			- a root logger is provided by default - getRootLogger()
				- usually class specific loggers are preferred
		- Appenders
			- responsible for delivering log events to their destination targets
			- formatting of the event is delegated to a layout
		- Layouts
			- responsible for returning a byte array to be turned into a String using the appropriate layout
	- Logging levels
		- Trace
			- debug message, used to capture the flow through out the application
				- identify a specific part for debugging
		- Debug
			- debug message for a general debug event/ some information that might be helpful to debug
		- Info
			- identify general event
		- Warning
			- identify an event that might lead to an error
		- Error
			- identify error occuring during app, potentially recoverable
		- Fatal
			- identify a server error that prevents an app from continuing its execution
			
Week 3 Questions
Collections / Generics
1.	What are collections in Java?
2.	What are the interfaces in the Collections API?
3.	What is the difference between a Set and a List?
4.	What is the difference between an Array and an ArrayList?
5.	What is the difference between ArrayList and Vector?
6.	What is the difference between TreeSet and HashSet?
7.	What is the difference between HashTable and HashMap?
8.	Are Maps in the Collections API? What makes Map different from other interfaces?
9.	List several ways to iterate over a Collection. How would you iterate over a Map?
10.	What is the purpose of the Iterable interface? What about Iterator?
11.	What is the difference between the Comparable and Comparator interfaces?
12.	What are generics? What is the diamond operator (<>)?
13.	Create and instantiate a generic class. Create and use a generic method.
Threads
1.	What is multi-threading?
2.	In what ways can you create a thread?
3.	List the methods in the Thread class and Runnable interface
4.	Explain the lifecycle of a thread
5.	What is deadlock?
6.	What is the synchronized keyword?
7.	What is the difference between String, StringBuilder, and StringBuffer? Which of these are thread-safe?

IO / Serialization
1.	How do you serialize / deserialize an object in Java?
2.	What is a Marker interface? What does Serializable interface do?
3.	What are transient variables?
4.	Difference between FileReader and BufferedReader?
5.	Explain the try-with-resources syntax
6.	List some methods in the Scanner class

Log4j
1.	What are the advantages to using a logging library?
2.	What is log4j?
3.	What are the logging levels of log4j?

Monday plan:
	
	- Survey (check your emails)
	- RevPro exam
	- Hackerrank (Optional, practice)	
		- https://www.hackerrank.com/1011javakevinweek4
	- 1-o-1s
	- QC assessment? 


1-o-1s
	- Albert, Peter, Malolan
	- Sam, Bezza, Andrew
	- Andre, Tricia, David
	- Kendrick, Jeremy, Alex
	- Dean, Gerardo, Patience
	- Hannah, Davey, Bruno
	- Kim, Tevon, Brayden

Content, depending on time available. 
	- Have PostgreSQL and DBeaver ready
Database
	- Collection of related data
	- allows for the preservation of data past the lifetime of an application

DBMS
	- Database management systems
		- collection of programs used to create and maintain databases
			- store data in a structured format
			- allows for concurrent use of data
			- control who has access to the data
			- maintain data integrity (consistency and accuracy of the data)
			- data back up and recovery
	- RDBMS
		- Relational Database Management Systems
			- consists of a collection of tables where tables are connected and reference each other
				- Table
					- Columns: Category of data - fields
					- Rows: Particular instance of data category - records (data entities)

SQL
	- Structured Query Language
		- provides a way to interact with data entities
	- SQL implementations
		- different "flavors" of SQL, arising from different vendors and platforms available
			- ie: OracleSQL, MySQL, NoSQL
			- syntax may vary based on the implementation
				- we'll be using PostgreSQL

Important distinction
	- PostgreSQL is RDBMS
	- DBeaver is a tool to easily visualize and interact with database entities

Database schema
	- collection of data objects including tables, views, triggers, functions
	- always belongs to one database
		- a database may have multiple schema

PostgreSQL
	- free and open source
	- Datatypes - https://www.postgresql.org/docs/10/datatype.html
		- Character types
			- CHAR
				- fixed-length, blank padded
			- VARCHAR
				- variable-length, with a limit
			- TEXT
				- variable-length with no limit
		- Numeric types
			- INTEGER
			- DECIMAL
				- for floating point, user specified
		- Temporal types
			- DATE
				- just date, no time
			- TIME
				- just time, no date
			- TIMESTAMP
				- date and time
		- Autoincrementing integer
			- SERIAL

SQL Sublanguages
	- refer to the different types of operations to be performed on database entities
	- for the sake of this training, there will be 5 SQL sublanguages
		- DDL, DCL, DML, DQL, TCL
			- DCL - Data Control Language
				- Manage user permissions within a database
					- define power/access to tables/schema to users
				- GRANT and REVOKE
			- DDL - Data Definition Language
				- Statements that are used to construct/modify/delete  database/scheme/user/tables/properties (Database entities)
					- CREATE
					- ALTER
					- DROP
					- TRUNCATE
						- unlike DROP, just removes records from a database
Constraints
	- limit the type of data entered in tables to ensure accuracy and reliability of the data
		- primary key, combination of not null and unique
		- not null, column cannot have a null value
		- unique, column's value needs to be unique
		- check(condition)
			- ensures that a condition is met
		- references
			- foreign key relationship
				 -identifies another record/row potentially in a different table

Keys
	- primary keys
		- column or a combination of columns which acts as a unique identifier to a record in a table
			- composite keys
				- combinations of columns which act as the primary key
	- foreign keys
		- used to illustrate relations between records
	- candidate keys
		- any columns that can be used to uniquely identify a record in a table

Multiplicity
	- refers to relationships between tables
		- one-to-one
			- exactly one row references another row
			- ie: one SNN per individual
		- one-to-many/many-to-one
			- exactly one row in a table is referenced by potentially many rows in another table
			- ie: one employee has many task but each task can have only one employee
		- many-to-many
			- several rows in one table can reference several rows in another table
			- ie: a task may have many employees and an employee may have many tasks
			- junction table
				- used to work with many-to-many relationships

Domain integrity
	- values must fall within the constraints placed on the columns
	- make sure that the values are "correct"

Referential integrity
	- want the database to be working properly within the constraints of a foreign key relationship
	- don't want records to record to reference another record that does not exist
		- orphaned records
	- delete on cascade to remove references as well

DML
	- Data Manipulation Language
	- statements to perform record level operations
		- to interact with the records stored in tables
	- CRUD 
		- Create/Read/Update/Delete
	- INSERT
		- create operation
		- insert into [table_name]([col1_name], [col2_name]...) values ([col1_value], [col2_value]...); 
			- mockaroo to generate mock-data
				- https://www.mockaroo.com/
	- UPDATE
		- update [table_name] set [col1_name] = [col1_value] where [condition]; 
			- if no where clause is specified, it will update every record in the table
	
	- DELETE
		- delete from [table_name] here [condition]; 
			- if no where clause is specified, it will delete every record in the table

DQL
	- Data Query Language
		- "sub-sub" language/ part of DML
	- Statements used to retrieve information from tables
	- SELECT
		- main operation when querying data that can be filtered using additional clauses
		- Result set can be filtered using: (order matters)
			- where
			- group by
			- having 
			- order by
			- limit
JDBC
	- Java Database Connectivity
		- establish a connection between a Java application and a database
			- dependency is database specific
	- Important JDBC classes/interfaces
		- DriverManager (C)
			- manage the JDBC driver
			- .getConnection()
				- provide a connection to the db
					- hardcoded (bad practice)
					- property file (prevent from pushing to GitHub using .gitignore)
					- environment variables
		- Connection (I)
			- represents the connection to the database
			- .setAutoCommit(boolean)
			- createStatement()/PreparedStatement()
			- commit()/rollback()
			- close()
		- Statement (I)
			- represents a SQL statement
			- .executeQuery(sql)
			- vulnerable to SQL injection
				- best used when no user input is required
		- PreparedStatement (I)
			- represents a SQL statement
				- that has been pre-processed and therefore prevents SQL injections
			- have to setFields for user inputs
		- ResultSet
			- result of a Query
	- SQL Injection
		- placing malicious code into a sql statement
			- ie: "select * from employees where = [userInput];
				- input could be "0; drop table employees;"
			

Joins
	- way to combine rows from different tables based on some logical relationship (columns)
		- inner join/join: return all the records that have matching values in both tables
		- left (outer) join: return all records from the left table and matched records from the right table
		- right (outer) join: return all records from the right table and matched records from the left table
		- full (outer) join: return all records when there is a match in either left or right table
		- self join: join a table with itself to combine related data from the same table

	- ie: https://www.postgresql.org/docs/10/tutorial-join.html

Scalar and aggregate functions
	- scalar functions
		- used on a single input to retrieve a single output
		- length, upper, lower, round...
	- aggregate functions
		- used on a group of inputs to retrieve a single output
		- count, avg, sum, max, min
		- GROUP BY
			- used with aggregate functions
			- select [col1], [aggregateFunction]([col2]) from [table_name] group by [col1];
		- HAVING
			- used with aggregate function for more specificity
			- select [col1], [aggregateFunction]([col2]) from [table_name] group by [col1]
				having [col2] > [x];

Normalization
	- refers to a database design technique that reduces redundancy and ensures that data is stored logically
	- consists in dividing larger tables into smaller tables and linking them using relationships
		- we're focus on the first 3 NFs (normal forms)
			- most databases are considered to be sufficiently normalized after 3 NFs
		- 1 NF
			- each table needs to have a primary key
			- tables need to be comprised of atomic values
				- values that cannot be broken down into smaller pieces
			- no repeated columns (or columns for the same purpose)
				- ie: color 1, color 2, ...
		- 2 NF
			- must have 1 NF
			- no partial dependencies
				- removing values that only depends on one part of the composite key
		- 3 NF 
			- must have 2 NF
			- no transitive dependency
				- field/column that can be derived based on other fields

						
					SaleStaff
EmployeeId | SalePersonName | SalesOffice (street, city, state, zip) | Age | DOB | Customer1 | Customer2 | Customer3

TCL
	- Transaction Control Language
		- Transaction
			- consists in combining multiple database operations into one unit of work
			- PostgreSQL treats every SQL statement as being executed within a transaction unless specified otherwise
		- Relevant statements
			- begin
				- can indicate the start of a transaction
					- if begin is not used, one can be implicitely provided
				- start of transaction block
					- statement(s) to be executed as a unit of work
					- between begin and commit
			- savepoint
				- saves the state of the database at that point within the transaction
			- rollback [savepoint]
				- reverts the state of a database to a previous commit or savepoint
			- commit
				- saves/persists the changes to a database

	- https://www.postgresql.org/docs/10/tutorial-transactions.html

	- Properties of a transaction - ACID
		- Atomicity
			- one unit, transaction should be completed as a whole or not at all
		- Consistency
			- database should be in a valid state before/after the transaction
				- valid in regards to db constraint
				- valid in regards to business logic
		- Isolation
			- one transaction should not interfere with another transaction
			- results of transactions executing concurrently should be the be the same as if they occured in sequence
		- Durability
			- Commits are final, changes should be persisted to the database
	
	- Transaction Isolation Levels
		- Read uncommited
			- able to read/interact with uncommited data
		- Read commited
			- only able to interact with commited data
		- Repeatable read
			- only see data commited before the transaction began
		- Serializable
			- strictest level of isolation
			- transactions have to occur sequentially
	- Read phenomema
		- Dirty read (can arise from read uncommited isolation level)
			- transaction is able to read data written in a concurrent uncommited transaction
		- Non repeatable read
			- a transaction re-reads data it has previously read and finds that the data has been modified by another transaction
		- Phantom read
			- transaction re-execute a query and returns a set of row to find out that the set has been modified by another transaction

Design Pattern
	- Best practice to address a certain programming problem
	

Singleton DP
	- used to ensure that there is only one instance of a class
		- ie: used for heavy resources
	- enforced using several conditions
		- private constructor: prevent classes from creating an instance
		- private static instance of the singleton class: static, to enforce that there is only one since it's associated with the class
		- public static synchronized accessor method: used retrieve the singleton instance

Factory DP
	- used to create/return implementations of classes/interfaces
	- useful when the specific implementation does not matter
	- enforces abstraction

Set operations(union)
	- operations used to combine queries together
		- NOTE: different from joins which combine tables together
		- combine the rows of different result sets
	- union
		- combining select query results with no duplicates
	- union all
		- combining select query results with duplicates
			- faster because duplicates are not filtered out
	- intersect
		- returns only the common records from both data sets
	- except
		- returns a dataset where the second results are removed from the first

Index
	- providing a more efficient way to retrieve records in a database 
		- an index is generated on fields set as primary key
		- BTree
			- leverages binary tree
			- better for comparison operations
		- Hash
			- leverages hashing
			- better for equality
	- makes update/insert/delete operation may take longer due to updating the index

Views
	- views are unmaterialized "view" of a query
		- views are not "stored" in the db
	- helpful to keep nested queries neat and promoring reusability.

Monday plan
	- QC surveys
	- RevPro assessment
	- Hackerrank Challenge
		- www.hackerrank.com/1011javakevinweek5
			- SQL based, you will be asked to write SQL queries
				- Syntax should be fairly similar, feel free to look at documentation as needed
	- 1-o-1s
		Albert
		Tricia
		Alex

		Davey
		David
		Dean

		Jeremy
		Peter
		Sam

		Kendrick
		Gerardo
		Bruno

		Andre
		Brayden
		Bezza

		Andrew
		Patience
		Malolan

		Kim
		Tevon
		Hannah

	- P0 presentations:
		- Wednesday 4-6pm ET
			- 5 minutes each
		- Final push Wednesday morning 10am


Resources:
	- https://www.w3schools.com/
	- https://developer.mozilla.org/en-US/docs/Web/HTML
	- RevPro

Optional VsCode add-on:
	- Live Server
		- allows for automatic refresh of HTML page in browser

HTML
	- Hypertext Mark-up Language
		- not a programming language
		- Mark-up language
	- Define the structure of a webpage using HTML tags
		- tags following a nested structure
		- structure of an HTML document
			- Doctype Declaration (optional as of html5)
				- tag that indicates the file is an HTML doc
			- html
				- head
					- metadata (information about the webpage)
				- body
					- information displayed on the webpage
	- Elements in HTML have attributes
		- these are used to provide more information regarding the tag
			- global attributes
				- present in all html tags
					- class, id, style
			- local attributes
				- present in certain tags
					- src, href
		- ie:
			<div id="div1">Hello World! By Kevin x2.</div>
			- div element with an attribute of id
	- Semantic elements
		- concept introduced in html5
		- provides more meanings to tags
			- helps with accessbility
		- names such as 
			- nav, main, section, footer, header.... instead of divs everywhere
	- Headers
		- h1 -> h6
			- biggest to smallest
	- Forms
		- tags that can be used to take user input and submit information
			- can submit information without js, just using attribute
				- method: specify the HTTP method
				- action: specify the url
	- self-closing tags
		- elements that do not require a closing tag
	- List
		- Ordered and unordered list
			- ol
				- ordered list
			- ul
				- unordered list
			- li
				- list items
	- Tables
		- nested in the table tag
			- tr to define a row
			- th/td to define a cell

CSS
	- Cascading style sheets
		- style is loaded from top to bottom
	- adds looks/style to HTML
		- HTML is the structure of a webpage, CSS is the styling
	- add CSS
		- inline
			- in the HTML tag via attribute
				- <div id="div1" style="color: cornflowerblue;"></div>
		- internally
			- in the HTML document, in the head tag
				- <style>
					selector {
						property: value;
					}
				  </style>
		- externally
			- from external stylesheets
				- best practice because can be reusable
			- <link rel="stylesheet" href="main.css">

	- Selectors
		- target specific elements to be styled
			- tag
			- class (.className)
			- id (#idName)
			- target elements more specifically: 
				- ie: nested elements...
				- https://www.w3schools.com/cssref/css_selectors.asp
		- styles apply based on specificity, most specific element will overrule
			- most to least: id > class > tag
	- CSS Box Model (common interview question)
		- Margin, Border, Padding, Content

BootStrap
	- Library of classes that can be leveraged as premade templates
		- import bootstrap into HTML page
		- leverage classes to style elements
	- Responsive Web Design
		- websites and webpages that automatically adapt to different screen size/types
		- uses grid system to enable behavior

Mockito
	- Java Framework used alongside unit testing frameworks such as JUnit
	- Allows for mocking behavior
		- mocks objects to be used with Unit tests
			- ie: mocking dao layer so that database is not actually changed with every tests
	- @Mock
		- indicating to Mockito that a mock implementation is needed
	- @InjectMocks
		- specify an object that needs to have the mock implementation injected into it
			- replaces the actual implementation, ie: (EmployeePostgres)
	- when(mockObject.methodName(params)).thenReturn(returnValue);
	- @ExtendWith(MockitoExtension.class)
		- allows us to specify that we are running our unit tests with mockito

JavaScript
	- a scripting language that can be used for client-side web applications
		- can also be used server side
	- interpreted language
		- not a compiled language, no compilation step, interpreted by the browser
		- nowadays more modern browsers include JIT (just in time compilation)
	- supported by all modern web browsers
	- ECMA, manages the standard specification of JS
		- ECMAScript - standards
			- ES6, ES7... 
	- multi-paradigmed
		- mainly supports functional programming but can also mimick OOP
	- dynamically/weakly typed language
		- variables do not have to be declared with a specific type and can be changed dynamically
			- type coersion: 8 == '8' --> compares the value itself, return true
				- === to compare type and value
	- semi-colon injections
		- puts a semi-colon where it feels like it's appropriate implicitely.
			- can lead to issues
	- ways to include JS to an html page
		- internally, include between <script></script>
		- externally, <script src="path/to/file.js"></script>
			- best practice
	- Datatypes in JS
		- "primitives"
			- boolean
			- number
			- null
			- undefined
			- symbol -- we're not going to talk about symbol
			- string
		- "objects"
			- objects
				- stored as key-value pairs
				- similar to JSON
			- arrays
				- unlike Java, arrays are dynamically sized and can contain multiple datatypes
				- QC likes to ask about array methods
					- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array
		- Truthy vs Falsy
			- any type in JS will valuate to either true or false
			- falsy values
				- null
				- underfined
				- 0
				- ''
				- false (the boolean)
				- NaN (not a number)
		- Functions
			- defined using the function keyword
				- function funcName(param1, param2){}
				- return a value, using the return keyword
			- additional types of functions
				- Function Expression/Anonymous Function
					- function declared without an explicit name, assigned to a variable instead
						- var someName = function (param1, param2){ return ...;}
				- Arrow function/notation
					- short hand syntax for writing functions
					- declaration, parameters, statements
						- var someName = param1, param2 => statements;
				- SelfInvoking Function(IIFE, immediately invoked function expression)
					- function invoked immediately after definition
						- (function() {//code})();
				- Callback function
					- functions passed in as an argument
					- help with asynchronous programming
					- 
					function funcOne(x) {//something with x}
					function funcThree(x) {//something else with x}

					function funcTwo(y, callback){
						callback(y);
					}
					
					funcTwo(6, funcOne);
					funcTwo(6, funcThree);
		- JavaScript scopes
			- where a declared variable is accessible
			- global
				- variable declared outside of the function scope
				- accessible anywhere within the script
			- function
				- variables declared within a function block
			- block
				- variables declared with a {} block
				- new to ES6
					- introced let and const to declare variables
						- let can be reassigned but not redeclared
						- const cannot be reassigned nor redeclared
		- Hoisting
			- variables declared var will be hoisted to the top of their scope
				- top of global/function scope
				- functions get hoisted
			- used before they are declared

		- 'use strict'
			- defined that the code should be executed in strict mode
				- can't use undeclared variables

DOM
	- Document Object Model
		- tree like representation of an HTML page using JS objects
			- each node of the tree represents a nested HTML element
	- Can traverse/navigate/retrieve elements from the DOM using js methods
		- document.getElementById
		- document.getElementsByClassName
		- document.getElementsByTagName
		- // can retrieve siblings, childs....
	- Can programmatically manipulate these elements using their properties
		- attributes
		- setAttributes
		- innerHTML
	- Can also create and append elements from JS
		- createElement("div") - creates an HTML element
		- appendElement("") - attach that element to the appropriate location in the DOM 

Template literal
	- declared between backticks: `` 
	- preservers new line
	- easier than concatenation
		- using concatenation: 'some string' + somevalue + '.'
		- using template literal: `some string ${somevalue}.`
			- to inject a value ${varName}

Event listeners
	- listeners that wait for certain events to happen to execute some functionality
		- onclick
		- onmousehover
		- onkeydown
		- ...
	- 1st step, retrieve element
	- assigning functionality
		- element.onclick = callback
		- element.addEventListener(event, callbackFunction, boolean)

Event propagation
	- how event listeners handle events for elements that have a parent/children with event listeners as well
	- 2 types
		- bubbling: default behavior - event bubbles up from the innermost child to the outermost parent
		- capturing: event starts from the outermost parent and moves down to the innermost child element
	- to specify behavior:
		- element.addEventListener(event, callbackFunction, boolean)
			- where boolean => true -> capturing
			- where boolean => false (or no argument) -> bubbling
	- to stop even propagation
		- event.stopProgation();

HTTP
	- HyperText Transfer Protocol
		- transfer protocol to exchange information over the web
	- Consists of requests and responses exchanged between a client and a server
	- information can be sent in many forms, plaintext, HTML, 
	- JSON (JavaScript Object Notation)
		- standard format for data transfer
		- allows information exchange between different applications(ie: different languages, frameworks...)
		
	- HTTP request
		- HTTP version: 1/1.1
		- Verb
			- HTTP methods: describes the operation requested by the HTTP request
			- 4 main ones
				- GET - retrieval operation (like select)
				- POST	- create operation (like insert)
				- PUT - update operation
				- DELETE - delete operation
		- URL
			- where the request is sent to/ resource location
		- Header
			- metadata about the request
		- Body
			- can be empty
			- can be used to include information
				- ie: information about a user to be created...
	- HTTP response
		- HTTP version
		- Header
		- Body
			- can be empty
			- can be used to return the information requested
		- Status code
			- information about the status of the request (100 - 500s)
				- 100 level: informational
				- 200 level: success
				- 300 level: redirect
				- 400 level: client error
				- 500 level: server error

AJAX
	- Asynchronous JS And XML
	- library that allows us to send HTTP requests and receive HTTP responses
		- allows for partial page reload
			- making async calls, code is still running while we wait for the HTTP response
	- 4 main Steps
		- create XMLHttpRequest object
		- setting a callback function to the ready state change of that object
		- parameterize / open the request object (set request information)
		- send the request
	- 5 ready states
		- 0: unsent - xhr object has beent created
		- 1: opened - .open() has been called
		- 2: headers received -- request has been sent, response headers have been received
		- 3: loading - body of the response is loading
		- 4: done - full response has been received and is ready for manipulation
	- onreadystate change callback function
		- checks that the ready state is 4 to make sure the the response was fully received
		- checks that the status code is 200 for success
		- define handling behavior for the response

Fetch API
	- an API in JS that allows us to send HTTP requests and receive HTTP responses
		- introduced in ES6
	- fetch(URL) - get
	- fetch(URL, {method: 'POST', body: JSON.stringify(JSObject)});
	- Can be used alongside async and await
		- introduced in ES7
		- async
			- used to specify a function that returns a promise or is making an asynchronous call
		- await
			- used in an async function to make an asynchronous call

S3 (AWS)
	- Simple Storage Service
		- Highly scalable
		- Highly durable and available
	- can programmatically access an s3 using the Amazon SDK
	- can host static webpages on S3
		- https://docs.aws.amazon.com/AmazonS3/latest/userguide/HostingWebsiteOnS3Setup.html


POJO/ Java Beans
	- POJO: Plain Old Java Object
		- Any java object, not bound to any specific restriction
		- used to define an entity
	- Java Beans
		- Special type of POJOs
			- All java beans are POJOs but not POJOs are Java beans
		- should implement the Serializable interface
			- marker interface that provides information to the compiler that a class can be serialized
				- serialization: process of converting an object into a stream of byte to store that object(file, db)...
		- no-args constructor defined
		- all fields to be encapsulated
			- private
			- setters/getters
		- override Object class methods
			- toString()
			- hashcode()
			- equals()

CRUD operations
	- Create | Read | Update | Delete
	- POST | GET | PUT | DELETE


Javalin
	- lightweight framework for Java (and Kotlin) to handle HTTP requests and response
	- runs on an embedded webserver(Jetty)
		- Jetty: an open source web server and servlet container which allows a servlet application to run 
	- Built on top of Servlets
	- Set up
		- dependencies
			- Javalin
			- slf4j
			- (Object mapper, optional)
		- main method
		- Javalin app = Javalin.create()
			      = Javalin.create( config -> {})
		- app.start(portNum)
			- by default 8080
		- HTTP handlers
			- a functional interface that takes in a Context Object as a parameter, used to specify a behavior to handle a request at a particular endpoint
				- Context object is an abstraction of HttpServletRequest and HttpServletResponse
					- used to retrieve information from the request
						- url
						- headers
						- body
					- used to add information to the response
						- headers
						- body
						- status code
				- https://javalin.io/documentation#context
			- app.get("path/endpoint", Executable<Handler>)
			- app.get("path/endpoint", lambda)
			- app.get("path/endpoint", (ctx) -> { // handle request})
			- app.post("path/endpoint"...)

			.../employees 
				- Get
					- retrieve all employees
				- Post
					- add a new employee
					- include employee information in the request body

JSON
	- JavaScript Object notation
		- JavaScript Like
		- string format used to represent objects to be exchanged over the web
			- syntax: {"key1":"value1", "key2":"value2"}
				- {} represent an object
				- key represent a field
				- value represent the field's value

JSON Marshalling/Object mapping
	- Converting Java Objects to JSON
		- mapping for data exchange
	- Jackson-databind
		- provides us with an object mapper to convert Java to JSON and vice versa
		- Jackson integrates very well with javalin
Handler groups
	- Grouping HTTP handlers/setting up path to handle different resources (ie: Pokemons)
		- app.routes()
			- can then set up paths (nested paths as well) for the different resources
				- path("resourceName", () -> {
						get(//Handling behavior);
						post(...);
						path("...")...
					});
	- handler methods in Controllers should take Context object as param to interact the Http request and response

URL - Uniform Resource Locator
	- Location for where a resource (on a server) is located
	- URL => protocol + domain name (host + port) + URI + parameters
 
	
	- URL: https://www.google.com/search?q=java+documentation&rlz=1C1GCEU_enUS924US924&oq=java+documen&aqs=chrome.0.0i433i512j69i57j0i512l5j69i60.4432j0j7&sourceid=chrome&ie=UTF-8
	
	- protocol - https://
	- domain name - www.google.com
	- URI - search
		- Uniform Resource Identifier
			- specifically determines a resource/service requested
	- parameters (query params)
		- ?param1=value1&param2=value2...
		- q=java+documentation
		- &rlz=1C1GCEU_enUS924US924
		- &oq=java+documen
		- &aqs=chrome.0.0i433i512j69i57j0i512l5j69i60.4432j0j7
		- &sourceid=chrome
		- &ie=UTF-8

Path param
	- parameter embedded in the url
		- resources/{path-param}/{something}
		- employees/{id}/reimbursements?param1=value1


REST
REST, or REpresentational State Transfer, is an architectural style for providing standards between computer systems on the web, making it easier for systems to communicate with each other. REST-compliant systems, often called RESTful systems, are characterized by how they are stateless and separate the concerns of client and server.

REST defines 6 architectural constraints which make a web service truly RESTful:

Uniform interface
Client–server
Stateless
Cacheable
Layered system
Code on demand (optional)
Resource: https://www.codecademy.com/articles/what-is-rest / https://restfulapi.net/resource-naming/

Characteristics of RESTful APIs
All RESTful APIs have few characteristics in common that distinguish them from other types of web services. Such characteristics include:

The explicit use of HTTP to facilitate client-server communication
The use of HTTP status codes to indicate the success or failure of request processing
The uniform naming convention used to define the application's endpoints
The server that processes requests does so in a stateless manner
The use of any one of a variety of data interchange formats (JSON, XML, etc.)
REST Architecture
Representational State Transfer is a software architectural style that defines a set of constraints to be used for creating web services.

Architectural Constraints
In order to be considered a "true" RESTful API, our API must correctly implement the follow architectural constraints:

Uniform Interface
This constraint requires that we be consistent in the naming of our API's endpoints. Our resources should only one logical URI and they should provide recipients a way to obtain other related resources that it may encapsulate. This constraint also includes the consistent use of some language-agnostic format as response payload (JSON, XML, BSON, etc.). Additionally, this constraint requires that we leverage HTTP as the protocol for interacting with our API. The HTTP verbs (GET, POST, PUT, etc.) combined with the consistent and intuitive naming of resource endpoints helps our API to achieve a uniform interface.

Client-server
This constraint emphasizes that our server application (the API) and the client application (the consumer of the API) must be able to evolve separately from one another. The client application only needs to know the URIs to resources exposed by the API.

Stateless
This constraint requires that the interaction between our client and our server is a stateless one. The server will not store anything about the client's request, and every request is a new request from the perspective of the API. The client is responsible for maintaining the state of the application.

Cacheable
Resources which will not change often should always be cached (either by the client or the server). This is done in order to decrease latency for the retrieval of frequently accessed, often immutable (or rarely changed) resources.

Layered System
As the name implies, this constraints requires that our system architecture is layered. This means that the different domains of our application are physically and logically separate from one another.

Resource: https://restfulapi.net/rest-architectural-constraints

Richardson Maturity Model
Resource: https://restfulapi.net/richardson-maturity-model/

ORM
	- Object-Relational mapping
		- converting between incompatible types of objects (Java) and database tables

JPA
	- Java Persitence API
		- interfaces meant for the mapping/managing of relational data with Java Objects
		- "concept" rather than an actual tool
			- describes which objects should be persisted and how
			- tools like Hibernate IMPLEMENT JPA
				- JPA != Hibernate

Hibernate
	- ORM framework for Java
		- leverage annotations or xml files to sync java objects with a database
	- Benefits
		- Abstraction of JDBC
			- uses JDBC under the hood
			- abstracts away SQL queries
				- abstracts sql dialects(ie: PostgreSQL, OracleSQL, MySQL...)
					- can reuse the same methods for different dialects
			- reduces boiler plate code 
		- Caching
			- can store query information in the server if reused
				- can reduce the number of calls to the database
		- leverages HQL
			- Hibernate Query Language
				- dialect specific to hibernate
			- if desired, native SQL can still be used (bad practice)

Class/Interfaces in Hibernate:

	- Configuration (C)
		- allowing to define information regarding your connection to your database/hibernate configuration to configure a session factory

		- hibernate.cfg.xml
			- config file for hibernate
				- root tag: hibernate-configuration
			- session factory tag
				- provide configuration for session factory
					- db info:
						- username/password
						- dialect - PostgreSQL
						- url
						- dialect...
					- hbm2ddl.auto
						- CREATE
							- drop all existing tables and objects with names provided in your application and recreate the schema
						- UPDATE
							- doesn't drop anything, but adds to the schema if needed
						- VALIDATE
							- makes sure that the schema is expected as defined in your application
						- NONE
							- hibernate doesn't do ddl
						- etc... 
		- Object mapping in Hibernate (xml or annotation based)
			- xml
				- create a file: EntityName.hbm.xml
					<hibernate-mapping>
						<class name="com.revature.models.ClassName" table="entities">
							<id name="entityId" column="entity_id"><generator class="increment"/></id>
							<property name="entityProperty" column="entity_property"></property>
						</class>
					</hibernate-mapping>	
				- in hibernate.cfg.xml
					- <mapping resource="EntityName.hbm.xml"></mapping>
			- annotation
				- <mapping class="com.revature.models.ClassName"></mapping>	
				- in the class, use JPA imported annotations to map a class
					- @Entity: must go at the top of the class to be mapped to a table
					- @Table: allows us to name a table to a different name than the class if desired
						- @Table(name="entities")		
	- SessionFactory (I)
		- Heavy resource
		- Singleton in charge of creating session object using a factory design pattern
	- Session (I)
		- represents database connection
	- Transaction (I)
		- manages ACID compliant transactions
		- retrieved from Session object
			- .beginTransaction()
				- commit();
				- rollback();
	- Query (I)
		- used to write more complex CRUD operations using HQL
	- Criteria(I)
		- used to programmatically write complicated SELECT statements

Lazy loading vs Eager fetching
	- when fetched eagerly, the entire object is retrieved as soon as the "parent" object is retrieved
		- ie: if a reimbursement is retrieved, the Employee associated with that reimbursement is also loaded into our application
	- when fetched lazily, a proxy is retrieved until that object is used in the session
		- ie: if a reimbursement is retrieved, the employee associated with that reimbursement is loaded as a proxy until used explicitely in the session
			- proxy: a dummy object/empty object aside from its unique identifier	

DAO/CRUD methods (These are common interview questions, for more info checkout the documentation)
	- .get() vs .load()
		- used to retrieve records from the database
		- get:
			- eager fetching
			- return null when getting an id not in the db
		- load
			- lazily fetches an object
			- throw an exception if it doesn't exist in the database
	- .update() vs merge()
		- update:
			- void return
			- if trying to updat an object with no id in db, throws an exception
			- if a persistent object in the same session has the same id, throws an exception
		- merge:
			- returns the merged object
			- if a persistent object in the same session has the same id, merges with the persistent object








